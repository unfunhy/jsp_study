/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.24
 * Generated at: 2019-10-29 12:59:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import study0926.Board;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.sql.Blob;
import java.util.Date;
import java.text.SimpleDateFormat;
import study0926.Client;

public final class Control_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.net.URLEncoder");
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("study0926.Client");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.sql.Blob");
    _jspx_imports_classes.add("study0926.Board");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      study0926.DBconnector db = null;
      db = (study0926.DBconnector) _jspx_page_context.getAttribute("db", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (db == null){
        db = new study0926.DBconnector();
        _jspx_page_context.setAttribute("db", db, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      study0926.Board _board = null;
      _board = (study0926.Board) _jspx_page_context.getAttribute("_board", javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      if (_board == null){
        _board = new study0926.Board();
        _jspx_page_context.setAttribute("_board", _board, javax.servlet.jsp.PageContext.REQUEST_SCOPE);
      }
      out.write("\r\n");
      out.write("\r\n");
	
		request.setCharacterEncoding("UTF-8");
		int numberOfPost = 8;
		String action = request.getParameter("action");
		
		if (action.equals("sign_up")) {
			String username = request.getParameter("username");
			String password = request.getParameter("password");
			int age;
			if (!request.getParameter("age").equals("")) {
				age = Integer.parseInt(request.getParameter("age"));
			} else {
				age = 0;
			}
			String sex = request.getParameter("sex");
			String phone = request.getParameter("phone");
			String addr = request.getParameter("addr");

			int checker = db.SetInfoToDB(username, password, age, sex, phone, addr);

			if (checker == 0) {
				out.print("<script> alert('서버에 연결되지 않았습니다. 네트워크를 확인해주세요.');history.go(-1); </script>");
			} else if (checker == 1) {
				out.print("<script> alert('이미 존재하는 아이디입니다.');history.go(-1); </script>");
			} else {
				out.print("<script> alert('회원가입이 완료되었습니다. 로그인 해주세요.'); location.href='sign_in.jsp'; </script>");
			}
		}
		
		else if (action.equals("login")) {
			int checker = db.GetInfoFromDB((String) request.getParameter("username"),
					(String) request.getParameter("password"));

			if (checker == 0) {
				out.println("<script> alert('서버에 연결되지 않았습니다. 네트워크를 확인해주세요.'); history.go(-1); </script>");
			} else if (checker == 1) {
				out.println("<script> alert('아이디 혹은 비밀번호를 확인해주세요.'); history.go(-1); </script>");
			} else {
				
				session.setAttribute("client", db.returnClient());
				out.println("<script> alert('게시판이 로드되었습니다.');</script>");
				response.sendRedirect("Control.jsp?action=read_board&index=0");
			}
		}
		
		else if (action.equals("read_board")) { // 보드 읽기
			String index = request.getParameter("index");
			String condition = "";
			String searchTag = "";
			String searchText = "";
			
			if (request.getParameter("searchText") != null) {
				searchTag = request.getParameter("searchTag");
				searchText = request.getParameter("searchText");
				if (!searchText.equals("") && !searchText.equals("null")) {
					condition = "where "+ searchTag +" like \'%"+ searchText +"%\'";
				}
			}
			
			int count = db.GetPostCount(condition);
			
			ArrayList<Board> board = db.ReadBoard(index, Integer.toString(numberOfPost), condition);
			
			request.setAttribute("board", board);
			request.setAttribute("index", index);
			request.setAttribute("count", Integer.toString(count));
			request.setAttribute("searchTag", searchTag);
			request.setAttribute("searchText", searchText);
			pageContext.forward("main.jsp");
		}

		else if (action.equals("create")) {
			Date time = new Date();
			SimpleDateFormat sf = new SimpleDateFormat("yy.MM.dd, HH:mm:ss");
			
			String tag = (String)request.getParameter("tag");
			String title = (String)request.getParameter("title");
			String contents = (String)request.getParameter("contents");
			String c_date = sf.format(time);
			
			Client client = (Client) session.getAttribute("client");
			db.CreatePost(tag, title, client.getUsername(), c_date, contents);
			response.sendRedirect("Control.jsp?action=read_board&index=0");
		}
		
		else if (action.equals("read")) { // 글 읽기
			String[] sender = db.ReadPost((String)request.getParameter("id"));
		
			System.out.println(request.getParameter("searchText"));
		
			request.setAttribute("index", request.getParameter("index"));
			request.setAttribute("searchTag", request.getParameter("searchTag"));
			request.setAttribute("searchText", request.getParameter("searchText"));
			request.setAttribute("sender", sender);
			pageContext.forward("readPost.jsp");
		}
		
		else if (action.equals("update")) {
			String id = (String) request.getParameter("id");
			String[] sender = new String[4];
			
			Date time = new Date();
			SimpleDateFormat sf = new SimpleDateFormat("yy.MM.dd, HH:mm:ss");
			
			String tag = (String) request.getParameter("tag");
			String title = (String) request.getParameter("title");
			String contents = (String)request.getParameter("contents");
			String c_date = sf.format(time);
			
			String index = (String) request.getParameter("index");
			String searchTag = request.getParameter("searchTag");
			String searchText = request.getParameter("searchText");
			
			db.UpdatePost(id, tag, title, c_date, contents);
			response.sendRedirect("Control.jsp?action=read&id="+id+"&index="+index+"&searchTag="+searchTag+"&searchText="+URLEncoder.encode(searchText));
		}
		
		else if (action.equals("deletePost")) {
			String id = (String) request.getParameter("id");
			String index = (String) request.getParameter("index");
			String searchTag = request.getParameter("searchTag");
			String searchText = request.getParameter("searchText");
			
			db.DeletePost(id);
			response.sendRedirect("Control.jsp?action=read_board&index="+index+"&searchTag="+searchTag+"&searchText="+URLEncoder.encode(searchText));
		}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
